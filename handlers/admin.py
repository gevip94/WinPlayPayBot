from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from sqlalchemy import select
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import async_session
from database.models import WithdrawalRequest, User

router = Router()

ADMIN_ID = 220977591  # üîê –£–∫–∞–∂–∏ –∑–¥–µ—Å—å —Å–≤–æ–π Telegram ID

# üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
@router.message(Command("withdraw_requests"))
async def show_withdraw_requests(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with async_session() as session:
        result = await session.execute(
            select(WithdrawalRequest).where(WithdrawalRequest.status == "pending")
        )
        requests = result.scalars().all()

        if not requests:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.")
            return

        for request in requests:
            user = await session.get(User, request.user_id)
            text = (
                f"üîπ <b>–ó–∞—è–≤–∫–∞ #{request.id}</b>\n"
                f"üë§ {user.full_name}\n"
                f"üí∞ {request.amount}‚ÇΩ\n"
                f"üí≥ {request.card_number}\n"
            )
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{request.id}")
            kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request.id}")
            await message.answer(text, reply_markup=kb.as_markup())

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("done_"))
async def mark_done(callback: types.CallbackQuery, bot: Bot):
    request_id = int(callback.data.split("_")[1])

    async with async_session() as session:
        request = await session.get(WithdrawalRequest, request_id)
        user = await session.get(User, request.user_id)

        request.status = "done"
        await session.commit()

        try:
            await bot.send_message(
                chat_id=user.id,
                text=(
                    f"üí∏ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{request.amount}‚ÇΩ</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
                    f"–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É üí≥ {request.card_number}"
                )
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await callback.message.edit_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ")

# ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("reject_"))
async def reject_withdraw(callback: types.CallbackQuery, bot: Bot):
    request_id = int(callback.data.split("_")[1])

    async with async_session() as session:
        request = await session.get(WithdrawalRequest, request_id)
        user = await session.get(User, request.user_id)

        request.status = "rejected"
        await session.commit()

        try:
            await bot.send_message(
                chat_id=user.id,
                text=(
                    f"üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{request.amount}‚ÇΩ</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º."
                )
            )
        except:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–∞—è ‚ùå")
