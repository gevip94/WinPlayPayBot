# handlers/game.py
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from database.db import async_session
from database.models import Question, User, GameResult  # üëà –¥–æ–±–∞–≤–∏–ª–∏ GameResult

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
@router.message(Command("game_now"))
async def start_game(message: types.Message, bot: Bot):
    user_id = message.from_user.id

    async with async_session() as session:
        questions = await session.execute(
            select(Question).where(Question.game_number == 1)
        )
        questions = questions.scalars().all()

    if len(questions) < 5:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã.")
        return

    await message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

    for question in questions:
        await send_question(bot, user_id, question)
        await asyncio.sleep(17)

    await message.answer("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(bot: Bot, user_id: int, question: Question):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=question.option_1, callback_data=f"ans:{question.id}:1")],
        [InlineKeyboardButton(text=question.option_2, callback_data=f"ans:{question.id}:2")],
        [InlineKeyboardButton(text=question.option_3, callback_data=f"ans:{question.id}:3")],
        [InlineKeyboardButton(text=question.option_4, callback_data=f"ans:{question.id}:4")],
    ])

    await bot.send_message(
        user_id,
        f"‚ùì <b>{question.text}</b>\n\n‚è± –£ —Ç–µ–±—è 15 —Å–µ–∫—É–Ω–¥!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith("ans:"))
async def handle_answer(callback: CallbackQuery):
    data = callback.data.split(":")
    q_id = int(data[1])
    selected = int(data[2])
    user_id = callback.from_user.id

    async with async_session() as session:
        question = await session.get(Question, q_id)
        user = await session.get(User, user_id)

        if not question or not user:
            await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", show_alert=True)
            return

        if selected == question.correct_option:
            user.correct_answers += 1
            await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")

            # ‚¨áÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–æ –≤ —Ç–∞–±–ª–∏—Ü—É game_results
            result = GameResult(
                user_id=user.id,
                score=1,
                game_number=question.game_number
            )
            session.add(result)

        else:
            user.wrong_answers += 1
            await callback.message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{getattr(question, f'option_{question.correct_option}')}</b>"
            )

        user.games_played += 1
        await session.commit()

    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...")
