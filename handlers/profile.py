from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from database.db import async_session
from database.models import User, WithdrawalRequest

router = Router()

@router.message(lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id

    async with async_session() as session:
        user = await session.get(User, user_id)

        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = (
            f"üë§ <b>{user.full_name}</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user.balance}‚ÇΩ</b>\n"
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: <b>{user.games_played}</b>\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: <b>{user.correct_answers}</b>\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: <b>{user.wrong_answers}</b>\n"
            f"üèÜ –ö—É–±–∫–æ–≤: <b>{user.cups}</b>\n\n"
        )

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞—è–≤–∫–∏
        result = await session.execute(
            select(WithdrawalRequest)
            .where(WithdrawalRequest.user_id == user_id)
            .order_by(WithdrawalRequest.created_at.desc())
            .limit(3)
        )
        withdrawals = result.scalars().all()

        if withdrawals:
            text += "üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n"
            for w in withdrawals:
                status = {
                    "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                    "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                }.get(w.status, "‚è∫ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                masked_card = f"****{w.card_number[-4:]}" if w.card_number else "N/A"
                text += f"‚Ä¢ üí∞ {w.amount}‚ÇΩ ‚Äì –∫–∞—Ä—Ç–∞ {masked_card} ‚Äì {status}\n"

        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="withdraw")
        keyboard.button(text="üìú –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="history")
        print("üì• –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏'")
        await message.answer(text, reply_markup=keyboard.as_markup())

# üìú –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫
@router.callback_query(F.data == "history")
async def show_full_history(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(WithdrawalRequest)
            .where(WithdrawalRequest.user_id == user_id)
            .order_by(WithdrawalRequest.created_at.desc())
        )
        withdrawals = result.scalars().all()

        if not withdrawals:
            await callback.message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            await callback.answer()
            return

        text = "<b>üìú –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:</b>\n"
        for w in withdrawals:
            status = {
                "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
                "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            }.get(w.status, "‚è∫ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            masked = f"****{w.card_number[-4:]}" if w.card_number else "N/A"
            text += f"‚Ä¢ üí∞ {w.amount}‚ÇΩ ‚Äì –∫–∞—Ä—Ç–∞ {masked} ‚Äì {status}\n"

        await callback.message.answer(text)
        await callback.answer()
