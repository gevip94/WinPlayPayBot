from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import async_session
from database.models import User, WithdrawalRequest

router = Router()

class WithdrawForm(StatesGroup):
    amount = State()
    card = State()
    confirm = State()

@router.callback_query(F.data == "withdraw")
async def start_withdraw(callback: types.CallbackQuery, state: FSMContext):
    print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏' —Å—Ä–∞–±–æ—Ç–∞–ª–∞")  # —Ç–µ—Å—Ç –ª–æ–≥
    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    await state.set_state(WithdrawForm.amount)
    await callback.answer()

@router.message(WithdrawForm.amount)
async def get_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ü–∏—Ñ—Ä–∞—Ö.")

    await state.update_data(amount=amount)
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:")
    await state.set_state(WithdrawForm.card)

@router.message(WithdrawForm.card)
async def get_card(message: types.Message, state: FSMContext):
    await state.update_data(card=message.text)
    data = await state.get_data()

    text = (
        f"üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
        f"üí∞ –°—É–º–º–∞: <b>{data['amount']}‚ÇΩ</b>\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: <b>{data['card']}</b>"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_withdraw")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")

    await message.answer(text, reply_markup=kb.as_markup())
    await state.set_state(WithdrawForm.confirm)

@router.callback_query(F.data == "confirm_withdraw")
async def confirm_withdraw(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    async with async_session() as session:
        user = await session.get(User, user_id)

        if user.balance < data["amount"]:
            await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            await state.clear()
            return

        user.balance -= data["amount"]
        request = WithdrawalRequest(
            user_id=user_id,
            amount=data["amount"],
            card_number=data["card"]
        )
        session.add(request)
        await session.commit()

    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_withdraw")
async def cancel_withdraw(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()
